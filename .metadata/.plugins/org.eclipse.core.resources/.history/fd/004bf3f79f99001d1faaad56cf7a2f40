package com.raster.auth;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.function.Supplier;

import javax.management.relation.Role;

import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.authorization.AuthorizationDecision;
import org.springframework.security.authorization.AuthorizationManager;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.stereotype.Service;

@Service
public class CustomAuthenticationAndAuthorizationProvider implements AuthenticationProvider, AuthorizationManager {

	private UserRepository userRepository;
	
	@Override
	public Authentication authenticate(Authentication authentication) throws AuthenticationException {
		String username = authentication.getName();
		String password = authentication.getCredentials().toString();
		
		Optional<User> user = userRepository.findByUsernameAndPassword(username, password);
		
		if(!user.isPresent()) {
			throw new BadCredentialsException("Invalid username or password!");
		}
		
		List<GrantedAuthority> grantedAuths = new ArrayList<>();
		
		for(Role role : user.get().getRoles()) {
			grantedAuths.add(new SimpleGra)
		}
		return null;
	}

	@Override
	public boolean supports(Class<?> authentication) {
		
		return authentication.equals(UsernamePasswordAuthenticationToken.class);
	}

	@Override
	public AuthorizationDecision check(Supplier authentication, Object object) {
		// TODO Auto-generated method stub
		return null;
	}

}
