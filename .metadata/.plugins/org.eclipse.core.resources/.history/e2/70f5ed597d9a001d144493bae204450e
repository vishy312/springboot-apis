package com.raster;

import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.web.PageableDefault;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class BusinessController {
	
	@Autowired
	private BusinessService businessService;
	
	@GetMapping("/shops")
	public Page<Business> getShops(@RequestParam(required=false, defaultValue="0") int page){
		Pageable pageable = PageRequest.of(page, 10, Sort.by(Direction.ASC, "name"));
		
		return businessService.getShops(pageable);
	}
	
	@GetMapping("/shops/{id}")
	public Business getShopById(@PathVariable Long id) {
		return businessService.getShopById(id);
	}
	
	@GetMapping("/shops/keyword")
	public Page<Business> getShopsByKeyword(@RequestParam(required=false) String key, @RequestParam(required=false, defaultValue="0") int page ){
		Pageable pageable = PageRequest.of(page, 10, Sort.by(Direction.ASC, "name"));
		return businessService.getShopsByKeyword(key, pageable);
	}
	
	@GetMapping("/shops/categories/{category}")
	public Page<Business> getShopsByCategory(@PathVariable String category, @RequestParam(required=false, defaultValue="0") int page){
		Pageable pageable = PageRequest.of(page, 10, Sort.by(Direction.ASC, "name"));
		return businessService.getShopsByCategory(category, pageable);
	}
	
	@PostMapping("/shop")
	public void addShop(@RequestBody Business shop) {
		businessService.addShop(shop);
	}
	
	@PostMapping("/shops")
	public void addShops(@RequestBody List<Business> shops) {
		if(shops.size() == 1) {
			businessService.addShop(shops.get(0));
		}else {
			businessService.addShops(shops);
		}
	}
	
	@PutMapping("/shops/{id}")
	public void editShop(@PathVariable Long id, @RequestBody Business shop) {
		businessService.editShop(id, shop);
	}
	
	@PatchMapping(value="/shops/{id}", consumes = "application/merge-patch+json")
	public void patchShop(@PathVariable Long id, @RequestBody Map<String, String> updates) {
		businessService.patchShop(id, updates);
	}
	
	@DeleteMapping("/shops/{id}")
	public void removeShop(@PathVariable Long id) {
		businessService.removeShop(id);
	}
}
